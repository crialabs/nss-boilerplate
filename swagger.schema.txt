Schemas
User{
login*	string
password*	string($password)
firstName*	string
lastName*	string
email*	string($email)
}
UserData{
login*	string
password*	string($password)
firstName	string
lastName	string
email*	string($email)
created*	string($date-time)
activated	string($date-time)
activationKey	string
apis*	{
< * >:	{
created*	string($date-time)
readToken*	string
writeToken*	string
}
}
}
ApiSummary{
apiId*	string
url*	string($uri)
}
Api{
apiId*	string
endpoints*	[{
id*	string
sparqlURI*	string($uri)
graphURI	string($uri)
httpMethod	string
Enum:
Array [ 2 ]
authInfo	{
user*	string
password*	string
type*	string
Enum:
[ basic, digest ]
}
sparqlUpdate	{
id	string
sparqlURI	string($uri)
graphURI	string($uri)
httpMethod	string
Enum:
Array [ 2 ]
authInfo	{
user*	string
password*	string
type*	string
Enum:
[ basic, digest ]
}
}
}]
model*	[{
id*	string
types*	[{
label*	string
endpoint*	string
inferred	boolean
restrictions	[string]
targetId	string
embed	boolean
writeonly	boolean
}]
dprops*	[{
label*	string
endpoint*	string
iri*	string($uri)
restrictions	[string]
writeonly	boolean
}]
oprops*	[{
label*	string
endpoint*	string
iri*	string($uri)
inv	boolean
restrictions	[string]
targetId	string
embed	boolean
writeonly	boolean
}]
}]
queryTemplates*	[{
id*	string
endpoint*	string
description	string
template*	string
variables*	[string]
parameters*	[{
label*	string
type*	string
Enum:
[ iri, string, number, integer, boolean ]
optional	boolean
}]
}]
}
ApiResponse{
status*	integer($int32)
message*	string
location	string
url	string($uri)
}
DumpConfig{
parameters	{
description:	
Parameters to be used in a step or an output element

< * >:	{
anyOf ->	
string
number
boolean
[{...}]
}
}
steps*	[{
id*	string
type*	string
Enum:
[ resource, resources, query ]
parameters*	{
description:	
Check the API model and query templates to set valid parameters

< * >:	{
anyOf ->	
string
number
boolean
[{
anyOf ->	
string
number
boolean
}]
DumpConfigParameter{...}
DumpStepResult{...}
}
}
}]
output*	[{...}]
}
DumpConfigParameter{
description:	
The key has to be defined in the parameters of the DumpConfig object

source*	string
Enum:
[ parameters ]
key*	string
}
DumpStepResult{
description:	
The id corresponds to a previous step in the DumpConfig object. Steps of types resource or resource need a key to extract the values of the step results (check the corresponding model element of the API). Steps of type query need a variable to extract the values of the step results (check the corresponding query template of the API).

source*	string
Enum:
[ steps ]
id*	string
key	string
variable	string
}